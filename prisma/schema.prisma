// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category{
  id String @id @default(uuid())
  name String
  companionId Companion[]
}

model Companion{
  id String @id @default(uuid())
  userId  String?
  userName    String?
  src     String?
  name    String @db.Text
  description String
  instructions String @db.Text
  seed String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category Category @relation(fields: [categoryId], references: [id])

  categoryId  String
  messages Message[]
  // tasks Task[]
  @@index([categoryId])
  @@index([name])
}

enum Role{
  user
  system
}

model Message{
  id String @id @default(uuid())
  role Role
  content String @db.Text
  ai_message String
  user_message String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companionId String
  userId String

  companion Companion @relation(fields:[companionId], references: [id], onDelete: Cascade)

  @@index([companionId])
}

model TaskCategory {
  id    String  @id @default(uuid())
  name  String @unique
  tasks Tasks[] 
}

model Tasks {
  id        String       @id @default(uuid())
  task_name String
  Status    Boolean      @default(false)
  taskId    String
  category  TaskCategory @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
